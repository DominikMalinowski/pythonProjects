{
	"info": {
		"_postman_id": "d5bac265-bd18-4a61-b8df-c6c572991008",
		"name": "JSON placeholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25603477"
	},
	"item": [
		{
			"name": "GET Posts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}posts?title_like=sunt",
					"host": [
						"{{base_url}}posts"
					],
					"query": [
						{
							"key": "title_like",
							"value": "sunt"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code verification\", () => {\r",
							"    // console.log(pm.response.code)\r",
							"    // pm.response.to.have.status(200);\r",
							"    // pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.expect(pm.response.code).to.oneOf([200,404])\r",
							"    pm.expect(pm.response.code).to.be.a(\"number\")\r",
							"}) \r",
							"\r",
							"pm.test(\"Response time <200\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.lessThan(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Status response verification\", () => {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\")\r",
							"    pm.expect(pm.response.status).to.be.a(\"string\")\r",
							"})\r",
							"\r",
							"pm.test(\"Verify post id\", () => {\r",
							"    const responseBody = pm.response.json();\r",
							"    // console.log(responseBody[0].id)\r",
							"    pm.expect(responseBody[0].id).to.eql(1);\r",
							"})\r",
							"\r",
							"pm.test(\"Verify field lenght\", () =>{\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody[1].name).to.have.lengthOf(41)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify single email\", () =>{\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody[1].email).to.include(\"@\")\r",
							"})\r",
							"\r",
							"pm.test(\"Verify all email\",() =>{\r",
							"    const responseBody = pm.response.json();\r",
							"    responseBody.map(obiekt =>{{\r",
							"        pm.expect(obiekt.email).to.include(\"@\")\r",
							"    }})\r",
							"})\r",
							"pm.test(\"Verify header 'Content type'\", () =>{\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"})\r",
							"\r",
							"pm.test(\"Verify header 'Connection'\", () =>{\r",
							"    pm.response.to.have.header(\"Connection\")\r",
							"})\r",
							"\r",
							"pm.test(\"Verify header 'Content type' value\", () =>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}comments",
					"host": [
						"{{base_url}}comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "5",
							"disabled": true
						},
						{
							"key": "_limit",
							"value": "2",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Global variables\", () => {\r",
							"//     const expected_title = pm.globals.get(\"post_title\");\r",
							"//     console.log(\"Z testu: \"+ expected_title)\r",
							"//     const responseBody = pm.response.json();\r",
							"//     pm.expect(responseBody.title).to.eql(expected_title)\r",
							"// })\r",
							"\r",
							"// pm.test(\"Collection variables\", () =>{\r",
							"//     const expected_base_url = pm.collectionVariables.get(\"base_url\");\r",
							"//     console.log(expected_base_url)\r",
							"// })\r",
							"\r",
							"// pm.test(\"Envoirement variables\", () =>{\r",
							"//     const expected_username = pm.environment.get(\"username\");\r",
							"//     console.log(expected_username)\r",
							"// })\r",
							"\r",
							"// pm.test(\"Set global varaible\",() =>{\r",
							"//     pm.globals.set(\"new_data\",420)\r",
							"//     console.log(pm.globals.get(\"new_data\"))\r",
							"// })\r",
							"\r",
							"// pm.test(\"Remove a variable\",() =>{\r",
							"//     pm.globals.unset(\"new_data\")\r",
							"//     console.log(pm.globals.get(\"new_data\"))\r",
							"// })\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userID}},\r\n    \"id\": 1625,\r\n    \"title\": \"{{post_title}}\",\r\n    \"body\": \"{{post_body}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}posts",
					"host": [
						"{{base_url}}posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function console_log_display() {\r",
							"    console.log(\"Pre-request script invoke\")\r",
							"}\r",
							"\r",
							"console_log_display();\r",
							"\r",
							"function email_generator(){\r",
							"    const random_number = Math.floor(Math.random() * (1000 - 1) + 1);\r",
							"    const random_email = \"test\" + random_number + \"@example.com\";\r",
							"    pm.globals.set(\"random email\", random_email);\r",
							"}\r",
							"\r",
							"email_generator()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function console_log_display_2() {\r",
							"    console.log(\"Post request script invoke\")\r",
							"}\r",
							"\r",
							"console_log_display_2();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"Patricia Lebsack\",\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"testtest@kory.org\",\r\n    \"address\": {\r\n        \"street\": \"Hoeger Mall\",\r\n        \"suite\": \"Apt. 692\",\r\n        \"city\": \"South Elvis\",\r\n        \"zipcode\": \"53919-4257\",\r\n        \"geo\": {\r\n            \"lat\": \"29.4572\",\r\n            \"lng\": \"-164.2990\"\r\n        }\r\n    },\r\n    \"phone\": \"493-170-9623 x156\",\r\n    \"website\": \"kale.biz\",\r\n    \"company\": {\r\n        \"name\": \"Robel-Corkery\",\r\n        \"catchPhrase\": \"Multi-tiered zero tolerance productivity\",\r\n        \"bs\": \"transition cutting-edge web services\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}users/4",
					"host": [
						"{{base_url}}users"
					],
					"path": [
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}users/5",
					"host": [
						"{{base_url}}users"
					],
					"path": [
						"5"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jsonplaceholder.typicode.com/",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "14",
			"type": "string"
		}
	]
}